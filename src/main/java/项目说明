1.发布订阅的基本概念   http://liyonghui160com.iteye.com/blog/2323545
 
1.发布订阅模式可以看成一对多的关系：多个订阅者对象同时监听一个主题对象，
这个主题对象在自身状态发生变化时，会通知所有的订阅者对象，使他们能够自动的更新自己的状态。

 
2.发布订阅模式，可以让发布方和订阅方，独立封装，独立改变，当一个对象的改变，需要同时改
变其他的对象，而且它不知道有多少个对象需要改变时，可以使用发布订阅模式
 
3.发布订阅模式在分布式系统的典型应用有， 配置管理和服务发现。
 配置管理：是指如果集群中机器拥有某些相同的配置，并且这些配置信息需要动态的改变，
 我们可以使用发布订阅模式，对配置文件做统一的管理，让这些机器各自订阅配置文件的改变
 ，当配置文件发生改变的时候这些机器就会得到通知，把自己的配置文件更新为最新的配置
    
 服务发现：是指对集群中的服务上下线做统一的管理，每个工作服务器都可以作为数据的发布方，
 向集群注册自己的基本信息，而让模型机器作为订阅方，订阅工作服务器的基本信息，
 当工作服务器的基本信息发生改变时如上下线，服务器的角色和服务范围变更，监控服务器就会
 得到通知，并响应这些变化。
--------------------------------------------------------------------            

ZooKeeper的Watcher事件机制可以说分布式场景下的观察者模式的实现。
基于这个watcher事件机制，配合注册到特定的ZNode节点，可以实现java应用的配置运行时的变更。

发布/订阅系统设计起来无非两种模式，推和拉。 
1. 推模式，服务端负责把变更的数据推给订阅的客户端。Web即时通信里的Comet技术便可以实现这种功能。 
2. 拉模式，也就是客户端定时轮询服务端。拉模式不仅有延迟，给服务端带来很大压力，而且十分低效。

  zookeeper采用的是推拉结合的模式 
1. 客户端订阅znode节点 
2. 被订阅的节点发生变化后，zookeeper服务端向客户端发生数据变更的watcher事件通知 
3. 客户端接收到watcher通知后，主动从服务端拉取变更的数据

阿里的配置变更中间件diamond，同样是基于推拉结合的模式来实现数据的动态变更。
初学zookeeper，写了一个数据库配置动态变更的demo。
zookeeper自带的Watcher注册后，数据变更一次便会自动取消注册。
这个设计实在反人类，大多数的开发者的需求肯定是注册一次，服务终生。
所以转向开源的ZkClient客户端。 

tickTime=2000    
dataDir=/Users/apple/zookeeper/data    
dataLogDir=/Users/apple/zookeeper/logs    
clientPort=4180   
参数说明:
tickTime: zookeeper中使用的基本时间单位, 毫秒值.
dataDir: 数据目录. 可以是任意目录.
dataLogDir: log目录, 同样可以是任意目录. 如果没有设置该参数, 将使用和dataDir相同的设置.
clientPort: 监听client连接的端口号.          
---------------------------------------------------------------------------------------    
http://blog.csdn.net/luckyzhoustar/article/details/50573744
数据发布/订阅
 所谓的配置中心，就是发布者把数据发送到zookeeper的一个或者一系列的节点上，供订阅者进行订阅。
 从而达到动态获取数据的目的，能够实现配置信息的集中式管理和数据的动态更新。
一般的类似于发布/订阅的模式有推和拉的两种方式，而在zookeeper中，是把这两种方式进行结合了。
客户端详服务端注册自己需要关注的节点，一旦该节点的数据发生变更，
那么服务端就会向相应的客户端发送watcher事件的通知，
客户端接受到这个消息通知后，需要主动的到服务端获取最新的数据。

 案例模拟
 下面通过一个案例来模拟一下zookeeper的这个场景的使用。
 在平常的开发中，会遇到这样的需求，系统中需要使用一些通用的配置信息，例如机器的列表信息，运行时开发配置，数据配置信息等。这些全局配置信息通常具备下面这些特性
 1.数据量比较小
 2.数据内容在运行时会发生变化
 3.集群中各个机器共享，配置一致

 对于上面中的这些配置，我们一般采取的操作是存取到本地或者内存中，无论采取哪种配置都可以实现相应的操作。但是一旦遇到集群规模比较大的情况的话，两种方式就不再可取。而我们还需要能够快速的做到全部配置信息的变更，同时希望变更成本足够小，因此我们需要一种更为分布式的解决方案。
 比如我们把数据库的相关的信息，供全局使用的信息来管理起来，这时候我们就可以在zookeeper上选取一个数据节点来配置存储。例如/app1/database_config
 
 
 
     
        